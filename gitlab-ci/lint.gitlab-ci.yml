# Repository cleanliness. Source tidiness, linting, and policy compliance.
# Enable once this becomes possible
#clang-tidy:configure-push:
#  extends:
#    - .gromacs:base:configure
#    - .use-clang:base
#    - .rules:basic-push
#  image: gromacs/cmake-3.15.7-llvm-9-openmpi:master
#  variables:
#    COMPILER_MAJOR_VERSION: 9
#    BUILD_DIR: build-clang-tidy
#    CMAKE_EXTRA_OPTIONS: -DCLANG_TIDY=clang-tidy-$COMPILER_MAJOR_VERSION -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
#
#clang-tidy:configure-schedule:
#  extends:
#    - .gromacs:base:configure
#    - .use-clang:base
#    - .rules:nightly-not-for-release
#  image: gromacs/cmake-3.15.7-llvm-9-openmpi:master
#  variables:
#    COMPILER_MAJOR_VERSION: 9
#    BUILD_DIR: build-clang-tidy
#    CMAKE_EXTRA_OPTIONS: -DCLANG_TIDY=clang-tidy-$COMPILER_MAJOR_VERSION
#
#clang-tidy:build:
#  extends:
#    - .gromacs:base:build
#    - .use-ccache
#    - .variables:default
#    - .rules:nightly-not-for-release
#  stage: source-check
#  image: gromacs/cmake-3.15.7-llvm-9-openmpi:master
#  needs:
#    - job: clang-tidy:configure-schedule
#  variables:
#    BUILD_DIR: build-clang-tidy
#
#clang-tidy:test:
#  extends:
#    - .gromacs:base:build
#    - .variables:default
#    - .rules:basic-push
#  stage: source-check
#  image: gromacs/cmake-3.15.7-llvm-9-openmpi:master
#  tags: []
#  needs:
#    - job: clang-tidy:configure-push
#  variables:
#    COMPILER_MAJOR_VERSION: 9
#    BUILD_DIR: build-clang-tidy
#    EXTRA_INSTALLS: clang-tidy-$COMPILER_MAJOR_VERSION
#    KUBERNETES_CPU_LIMIT: 2
#    KUBERNETES_CPU_REQUEST: 2
#    KUBERNETES_MEMORY_REQUEST: 2Gi
#  script:
#    # TODO (issue #3272) `master` is not appropriate for use on release-xxxx branches, how should we handle that?
#    - REV=$(git fetch -q https://gitlab.com/gromacs/tng.git master && git show -s --pretty=format:"%h" `git merge-base FETCH_HEAD HEAD`)
#    - HEAD_REV=$(git show -s --pretty=format:"%h" HEAD)
#    - if [[ "$REV" == "$HEAD_REV" ]] ; then
#        REV="HEAD~1" ;
#      fi
#    - echo "Revision used for branch point is $REV"
#    - git show -s $REV
#    - RUN_CLANG_TIDY=run-clang-tidy-$COMPILER_MAJOR_VERSION bash admin/clang-tidy.sh check --parallel=$KUBERNETES_CPU_LIMIT --warnings=clang-tidy.log --rev=$REV -B=$BUILD_DIR
#    - grep -i "found code issues" clang-tidy.log | tee code-lint.txt || true
#    - if [ -s code-lint.txt ] ; then echo "clang-tidy.sh found issues"; exit 1; fi
#  artifacts:
#    when: on_failure
#    paths:
#      - clang-tidy.log
#      - code-lint.txt
#
#clang-format:
#  extends:
#    - .variables:default
#    - .rules:basic-push
#  cache: {}
#  stage: lint
#  image: gromacs/ci-docs-llvm:master
#  tags: []
#  variables:
#    COMPILER_MAJOR_VERSION: 7
#    KUBERNETES_CPU_LIMIT: 1
#    KUBERNETES_CPU_REQUEST: 1
#    KUBERNETES_MEMORY_REQUEST: 2Gi
#    EXTRA_INSTALLS: clang-format-$COMPILER_MAJOR_VERSION
#  script:
#    # TODO (issue #3272) `master` is not appropriate for use on release-xxxx branches, how should we handle that?
#    - REV=$(git fetch -q https://gitlab.com/gromacs/gromacs.git master && git show -s --pretty=format:"%h" `git merge-base FETCH_HEAD HEAD`)
#    - HEAD_REV=$(git show -s --pretty=format:"%h" HEAD)
#    - if [[ "$REV" == "$HEAD_REV" ]] ; then
#        REV="HEAD~1" ;
#      fi
#    - echo "Revision used for branch point is $REV"
#    - git show -s $REV
#    - CLANG_FORMAT=clang-format-$COMPILER_MAJOR_VERSION admin/clang-format.sh check --rev=$REV --warnings=clang-format.log
#    - grep -i "needs formatting" clang-format.log | tee formatting.txt || true
#    - if [ -s formatting.txt ] ; then echo "clang-format.sh found issues"; exit 1; fi
#  artifacts:
#    when: on_failure
#    paths:
#      - clang-format.log
#      - formatting.txt
#
#copyright-check:
#  extends:
#    - .variables:default
#    - .rules:basic-push
#  cache: {}
#  stage: lint
#  image: gromacs/ci-docs-llvm:master
#  tags: []
#  variables:
#    KUBERNETES_CPU_LIMIT: 1
#    KUBERNETES_CPU_REQUEST: 1
#    KUBERNETES_MEMORY_REQUEST: 2Gi
#  script:
#    # TODO (issue #3272) `master` is not appropriate for use on release-xxxx branches, how should we handle that?
#    - REV=$(git fetch -q https://gitlab.com/gromacs/gromacs.git master && git show -s --pretty=format:"%h" `git merge-base FETCH_HEAD HEAD`)
#    - HEAD_REV=$(git show -s --pretty=format:"%h" HEAD)
#    - if [[ "$REV" == "$HEAD_REV" ]] ; then
#        REV="HEAD~1" ;
#      fi
#    - echo "Revision used for branch point is $REV"
#    - git show -s $REV
#    - admin/copyright.sh check --rev=$REV --warnings=copyright.log
#    - grep -i "copyright year" copyright.log | tee years.log || true
#    - grep -i "copyright header" copyright.log | tee headers.log || true
#    - if [[ -s years.log || -s headers.log ]] ; then
#      echo "Copyright information needs updating" ;
#      exit 1 ;
#      fi
#  artifacts:
#    when: on_failure
#    paths:
#      - copyright.log
#      - years.log
#      - headers.log
